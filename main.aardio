import win.ui;
import win.ui.menu;
import win.dlg.message;
import fsys;
import fsys.dlg;
import fsys.dlg.dir;//仅支持WIN7以后版本,XP上自动降级为fsys.dlg.opendir
/*DSG{{*/
mainForm = win.form(text="Python2Aardio Conversion Helper";right=959;bottom=591;acceptfiles=1;maximize=1)
mainForm.add(
btnSelSource={cls="button";text="...";left=454;top=20;right=491;bottom=44;aw=1;dt=1;tabstop=1;z=17};
btnSelTarget={cls="button";text="...";left=454;top=50;right=491;bottom=74;aw=1;dt=1;tabstop=1;z=16};
btnStart={cls="button";text="开始转换";left=518;top=54;right=596;bottom=78;dr=1;dt=1;tabstop=1;z=6};
cbAddSemicolon={cls="checkbox";text="行尾加分号";left=633;top=32;right=720;bottom=46;checked=1;dr=1;dt=1;tabstop=1;z=12};
cbCamelizeFile={cls="checkbox";text="文件名改驼峰式";left=740;top=8;right=854;bottom=22;checked=1;dr=1;dt=1;tabstop=1;z=19};
cbCamelizeVar={cls="checkbox";text="变量名改驼峰式";left=518;top=32;right=628;bottom=46;checked=1;dr=1;dt=1;tabstop=1;z=13};
cbCopyOthers={cls="checkbox";text="复制其它文件";left=633;top=8;right=729;bottom=22;dr=1;dt=1;tabstop=1;z=18};
cbSubDir={cls="checkbox";text="包含子目录";left=519;top=8;right=606;bottom=22;checked=1;dr=1;dt=1;tabstop=1;z=9};
edtSourceCode={cls="edit";left=14;top=283;right=483;bottom=581;ah=1;aw=1;db=1;dl=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=5};
edtSourcePath={cls="edit";text="D:\Documents\My Projects\Aardio\py2aardio\test\strategy.py";left=83;top=20;right=449;bottom=44;acceptfiles=1;aw=1;dl=1;dt=1;edge=1;multiline=1;tabstop=1;z=2};
edtTargetCode={cls="edit";left=500;top=283;right=945;bottom=582;ah=1;aw=1;db=1;dr=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=8};
edtTargetPath={cls="edit";text="D:\Documents\My Projects\Aardio\py2aardio\test\";left=83;top=51;right=449;bottom=75;acceptfiles=1;aw=1;dl=1;dt=1;edge=1;multiline=1;tabstop=1;z=14};
groupbox={cls="groupbox";text="选择文件路径";left=7;top=3;right=501;bottom=81;aw=1;dl=1;dr=0.48;dt=1;edge=1;z=1};
groupbox2={cls="groupbox";text="源文件";left=7;top=110;right=490;bottom=586;ah=1;aw=1;db=1;dl=1;dt=1;edge=1;z=4};
groupbox3={cls="groupbox";text="目标文件";left=494;top=110;right=949;bottom=586;ah=1;aw=1;db=1;dr=1;dt=1;edge=1;z=7};
lbSource={cls="listbox";left=15;top=126;right=483;bottom=281;acceptfiles=1;ah=1;aw=1;dl=1;dt=1;edge=1;hscroll=1;items={};msel=1;vscroll=1;z=10};
lbTarget={cls="listbox";left=500;top=126;right=944;bottom=281;ah=1;aw=1;dr=1;dt=1;edge=1;hscroll=1;items={};msel=1;vscroll=1;z=11};
lblPrgFile={cls="static";left=53;top=86;right=946;bottom=104;center=1;dl=1;dr=1;dt=1;transparent=1;z=21};
lblPrgNum={cls="static";text="0 / 0";left=634;top=56;right=910;bottom=74;align="center";center=1;dr=1;dt=1;transparent=1;z=22};
lblPrgText={cls="static";text="进度:";left=15;top=86;right=49;bottom=104;center=1;dl=1;dt=1;transparent=1;z=20};
static={cls="static";text="源文件路径：";left=15;top=24;right=82;bottom=40;dl=1;dt=1;tabstop=1;transparent=1;z=3};
static2={cls="static";text="目标路径：";left=15;top=55;right=82;bottom=71;dl=1;dt=1;tabstop=1;transparent=1;z=15}
)
/*}}*/

import core.converter;
import thread.command;
var sourceType = 'file';
var sourceCount, targetCount = 0, 0;	//源文件和目标文件的数量
var sourcesFinished = false;	//源文件是否全部发送完毕, 用于指示进度结束
var sourceRoot = ''; //源文件的根目录
var targetRoot = ''; //目标文件的根目录

// 根据源文件和根目录, 获取目标文件的完整路径文件名
var getTargetFullName = function(fileFullName, ext = 'aardio') {
    // 例: "C:\Documents\My Projects\python\test.py"
    var b, e = string.indexOf(fileFullName, sourceRoot); //此处不能用string.replace或find, 模式串匹配不到
    assert(b > 0, "源文件路径异常");
    var relativePath = '';
    relativePath = string.slice(fileFullName, e + 1);
    //在目标根目录后面加上相对路径(含文件名)
    var result = targetRoot + relativePath;
    //console.debug('getTargetFullName:\r\n\tfileFullName=', fileFullName,'\r\n\tsourceRoot=', sourceRoot, '\r\n\ttargetRoot=', targetRoot, '\r\n\tresult=', result);
    if(ext) {	// 若指定了文件扩展名
    	// 则修改文件扩展名, 默认改为 ".aardio"
    	var p = string.lastIndexAny(result, ".");
    	if (p) {
        	result = string.left(result, p);
    	}
    	result ++= ext;
    }
    //console.debug('getTargetFullName:result=', result);
    return result;
};

// 转换单个文件
var convertSingleFile = function(fileFullName, cfg) {
    if (fileFullName) {
        //assert( string.load( fileFullName ) );
        var src = string.load(fileFullName);
        if (#src) {
            mainForm.edtSourceCode.text = src;
            mainForm.edtSourcePath.text = fileFullName;

            mainForm.edtSourceCode.color = 0;
            mainForm.edtSourceCode.redraw();

            mainForm.edtSourcePath.color = 0;
            mainForm.edtSourcePath.redraw();
            var cvter = core.converter(src, cfg);
            var tag = fsys.getFileName(fileFullName);
            var result, err = cvter.go(tag);
            if (result) {
                mainForm.edtTargetCode.text = result;
                var res = string.save(cfg.targetFile, result); //保存到文件
                thread.command.send('addTargetItem', 'file', cfg.targetFile);
            } else {
                //TODO: command listener 'log'
                thread.command.send('log', '[Error]conversion error:'++err++', file: '++fileFullName);
            }
            thread.command.send('targetFinished', cfg.targetFile);
        } else {
            //TODO: command listener 'log'
            thread.command.send('log', '[Warn]Empty source file: '++fileFullName);
        }
    }
};

//文件转换线程, 用于批量转换
//@thread function
var convertFn = function(dir, tagname, fileFullName, cfg) {
    import thread.command;
    //import console;
	import core.converter;
    
    if (fileFullName) {
        var src = string.load(fileFullName);
        if (#src) {
            var cvter = core.converter(src, cfg);
            var result, err = cvter.go(tagname);
            if (result) {
                var res = ..string.save(cfg.targetFile, result); // 保存文件
                thread.command.send('addTargetItem', 'file', cfg.targetFile);
            } else {
                thread.command.send('log', '[Error]conversion error:'++err++',file='++fileFullName);
            }
        } else {
            thread.command.send('log', '[Warn]Empty source file: '++fileFullName);
        }
        thread.command.send('targetFinished', cfg.targetFile);
    }
};

//文件复制, 用于项目的整体转换(复制其它格式的文件)
//@thread function
var copyFile = function(fileFullName, cfg) {
	import thread.command;
    //import console;
    import fsys;
    
	if(fileFullName) {
		var ok = fsys.copy(fileFullName, cfg.targetFile);
		if(ok) {
            thread.command.send('addTargetItem', 'file', cfg.targetFile);
			thread.command.send('log', '[Info]successfully copied file: ' ++ fileFullName);
		} else {
			thread.command.send('log', '[Error]copy file error' ++ ', file='++fileFullName);
		}
		thread.command.send('targetFinished', cfg.targetFile);
	}
}

// 文件名驼峰化
var camelizeFilename = function(fileFullName) {
    var result = fileFullName;
    var path = fsys.getParentDir(result);
    var fname = fsys.getFileName(result);
    var pattern = `([a-z\d\$])_([a-z])`; //以下划线'_'连接的小写字母文件名
    fname = string.replace(fname, pattern, function($1, $2) {
        //owner = 原始字符串
        return $1 ++ string.upper($2); // file_name.ext -> fileName.ext
    });
    result = path ++ fname;
    //console.debug('camelizeFilename: result='++ result);
    return result;
}
//线程命令
var listener = thread.command();
listener.addSourceItem = function(sourceType, item) {
    sourceCount++;
    mainForm.lbSource.add(item);
};

listener.addTargetItem = function(sourceType, item) {
    targetCount++;
    mainForm.lbTarget.add(item);
};

listener.sourcesFinished = function(count) {
    // 所有源文件已经发送完毕
    sourcesFinished = true;
};

listener.targetFinished = function(fileName) {
    // 单个目标文件已经转换结束
	// 显示进度
    mainForm.lblPrgFile.text = fileName;
    var finished = sourcesFinished and sourceCount == targetCount;
    mainForm.lblPrgNum.text = sourceCount ++ (sourcesFinished ? ' (完毕)' : '') ++ ' / ' ++ targetCount ++ (finished ? ' (完毕)' : '');

}

listener.log = function(logLevel, str) {
    //TODO: log 输出
};
    
mainForm.btnStart.oncommand = function(id, event) {
    var srcPath = string.trim(mainForm.edtSourcePath.text);
    if (#srcPath == 0) {
        mainForm.msgErr("请选择源文件或目录!");
        return false;
    }
    sourceRoot = sourceType == 'dir' ? srcPath : fsys.getParentDir(srcPath);
    targetRoot = string.trim(mainForm.edtTargetPath.text);
    if (#targetRoot == 0) {
        mainForm.msgErr("请选择目标文件的目录!");
        return false;
    }
    var tail = targetRoot[#targetRoot];
    if (tail != '\\'#) targetRoot ++= "\";

    var srcPath = mainForm.edtSourcePath.text;
    // 清空列表框和代码框
    mainForm.lbSource.clear();
    mainForm.lbTarget.clear();
    mainForm.edtSourceCode.clear();
    mainForm.edtTargetCode.clear();
    
    var cfg = {
        addSemicolon = mainForm.cbAddSemicolon.checked == 1;	//行尾添加分号
        camelizeVar = mainForm.cbCamelizeVar.checked == 1;		//变量名改为驼峰式
        camelizeFile = mainForm.cbCamelizeFile.checked == 1;	//文件名改为驼峰式
        copyOthers = mainForm.cbCopyOthers.checked == 1;		//复制其它格式文件, 用于整个工程的整体性转换
    };
	
	sourceCount = 0; targetCount = 0;	// 复位源/目标文件计数
	sourcesFinished = false;
	
    if (sourceType == 'file') {
        thread.command.send('addSourceItem', 'file', srcPath);
        var ext = fsys.getExtensionName(srcPath);
        if(ext != 'py') {
        	var answer = mainForm.msgboxTest('该文件(*.'++ext++')不是 python 源文件, 是否继续?');
        	if(answer != true)
        		return;
       	}
        cfg.targetFile = getTargetFullName(srcPath); // 通过cfg传入目标文件完全路径
        if(cfg.camelizeFile) {
            cfg.targetFile = camelizeFilename(cfg.targetFile);
        }
        convertSingleFile(srcPath, cfg); // 转换单个文件
    }
    elseif(sourceType == 'dir') {
        var count = 0; // 转换总数量
        //批量处理文件夹
        fsys.enum(srcPath/*要遍历的目录*/, "*.*"/*指定查询文件名,支持windows掩码*/, function(dir, filename, fileFullName, findData) { //指定触发器
            if (filename) { //若是文件
            	var ext = fsys.getExtensionName(filename);
            	//console.debug("src file：" ++ fileFullName);
            	if (ext == 'py') { // 若是 py 文件 则转换格式
            		count++;
                	//console.debug("文件："++filename, ', dir='++dir, ',fileFullName='++fileFullName);
                	thread.command.send('addSourceItem', 'file', fileFullName);
                	cfg.targetFile = getTargetFullName(fileFullName); // 通过cfg 将目标文件路径传入线程
                	if(cfg.camelizeFile) {
            			cfg.targetFile = camelizeFilename(cfg.targetFile);
        			}
                	thread.invoke(convertFn, dir, filename, fileFullName, cfg);
                } 
                elseif (cfg.copyOthers) {	// 否则,若需复制目录内的其它文件(用于整个工程的整体性转换)
                	//console.debug(fileFullName);
                	count++;
                	thread.command.send('addSourceItem', 'file', fileFullName);
                	cfg.targetFile = getTargetFullName(fileFullName, false); // 通过cfg 将目标文件路径传入线程(false=不修改扩展名)
                    thread.invoke(copyFile, fileFullName, cfg);
                }
            }
            /* else {	//若是目录
				//console.log("目录：", dir)
				thread.command.send('addSourceItem', 'dir', dir);
			}
			*/
        }, mainForm.cbSubDir.checked == 1 /*是否递归子目录*/ ); //fsys.enum 
        thread.command.send('sourcesFinished', count);	// 发送[所有源文件已发送完毕]的消息, 等待所有子线程异步结束
        if (count == 0) {
            thread.command.send('log', '[Warn]no python file found');
            mainForm.msgWarn('未发现有效的 python 文件');
        }
    }
}

import console;
mainForm.edtSourceCode.wndproc = function(hwnd, message, wParam, lParam) {
    select(message) {
        case 0x115 /*_WM_VSCROLL*/ {
            //TODO: 转换成相对百分比%
            var event, pos = ::LOWORD(wParam),
                ::HIWORD(wParam);
            //console.debug('edtSourceCode.vscroll msg: event='++tostring(event, 16)++', pos='++tostring(pos,16));
            //var min,max,page = scrollbar.getRange();
            mainForm.edtTargetCode.sendMessage(message, wParam, lParam);
        }
        case 0x114 /*_WM_HSCROLL*/ {
            //console.debug('edtSourceCode.hscroll to', tostring(wParam,16) , tostring(lParam,16));
            mainForm.edtTargetCode.sendMessage(message, wParam, lParam);
        }
    }
    //无返回值则继续调用默认回调函数
}

//TODO: 点击左右列表框, 切换显示相应的源代码

// 使目标路径与源文件路径相同
var targetFollowSrcPath = function() {
    var path = mainForm.edtSourcePath.text;
    if (path) {
        if (sourceType == 'file') {
            path = fsys.getParentDir(path);
        }
        mainForm.edtTargetPath.text = path;
        targetRoot = path;
    }
};

// 选择源文件-单个文件-菜单项点击事件
var miSelSrcFileClick = function(id) {
    var initDir = mainForm.edtSourcePath.text;
    if (sourceType == 'file') {
        initDir = fsys.getParentDir(initDir);
    }
    var pathfile = fsys.dlg.open("Python文件|*.py|所有文件|*.*||", "选择要转换的Python源文件", initDir);
    if (pathfile) {
        sourceType = 'file';
        mainForm.edtSourcePath.text = pathfile;
        targetFollowSrcPath();
    }
};

// 选择源文件-文件夹-菜单项点击事件
var miSelSrcFolderClick = function(id) {
    var initDir = mainForm.edtSourcePath.text;
    if (sourceType == 'file') {
        initDir = fsys.getParentDir(initDir);
    }
    var pathfile = fsys.dlg.dir(initDir, mainForm);//新版打开目录对话框(旧版为opendir)
    if (pathfile) {
        sourceType = 'dir';
        mainForm.edtSourcePath.text = pathfile;
        targetFollowSrcPath();
    }
};

// 选择目标文件夹-同源文件-菜单项点击事件
var miSelTargetFollowSrcClick = function(id) {
    targetFollowSrcPath();
};

// 选择目标文件夹-另选别处-菜单项点击事件
var miSelTargetOtherFolderClick = function(id) {
    var initDir = mainForm.edtSourcePath.text;
    if (sourceType == 'file') {
        initDir = fsys.getParentDir(initDir);
    }
    var path = fsys.dlg.dir(initDir, mainForm);//新版打开目录对话框(旧版为opendir)
    if (path) {
        mainForm.edtTargetPath.text = path;
        targetRoot = path;
    }
};

mainForm.btnSelSource.oncommand = function(id, event) {
    var popmenu = win.ui.popmenu(mainForm);
    popmenu.add('单个文件...', miSelSrcFileClick);
    popmenu.add('文件夹...', miSelSrcFolderClick);
    popmenu.popup(owner.right - owner.width / 2, owner.bottom); // owner is the button
}

mainForm.btnSelTarget.oncommand = function(id, event) {
    var popmenu = win.ui.popmenu(mainForm);
    popmenu.add('同源文件', miSelTargetFollowSrcClick);
    popmenu.add('另选别处...', miSelTargetOtherFolderClick);
    popmenu.popup(owner.right - owner.width / 2, owner.bottom); // owner is the button
}

mainForm.show();
return win.loopMessage();